
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000296  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00000296  0000032a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000045  00800070  00800070  0000033a  2**0
                  ALLOC
  3 .comment      00000027  00000000  00000000  0000033a  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  00000361  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c41  00000000  00000000  000003e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000859  00000000  00000000  00001022  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000235  00000000  00000000  0000187b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001d0  00000000  00000000  00001ab0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000421  00000000  00000000  00001c80  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004de  00000000  00000000  000020a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000257f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	23 c0       	rjmp	.+70     	; 0x5e <__vector_11>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	4a c0       	rjmp	.+148    	; 0xb0 <__vector_13>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e6 e9       	ldi	r30, 0x96	; 150
  3a:	f2 e0       	ldi	r31, 0x02	; 2
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a0 37       	cpi	r26, 0x70	; 112
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	10 e0       	ldi	r17, 0x00	; 0
  4a:	a0 e7       	ldi	r26, 0x70	; 112
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a5 3b       	cpi	r26, 0xB5	; 181
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	10 d1       	rcall	.+544    	; 0x27a <main>
  5a:	1b c1       	rjmp	.+566    	; 0x292 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <__vector_11>:
ISR(UART0_RECEIVE_INTERRUPT)
/*************************************************************************
Function: UART Receive Complete interrupt
Purpose:  called when the UART has received a character
**************************************************************************/
{
  5e:	1f 92       	push	r1
  60:	0f 92       	push	r0
  62:	0f b6       	in	r0, 0x3f	; 63
  64:	0f 92       	push	r0
  66:	11 24       	eor	r1, r1
  68:	2f 93       	push	r18
  6a:	8f 93       	push	r24
  6c:	9f 93       	push	r25
  6e:	ef 93       	push	r30
  70:	ff 93       	push	r31
    unsigned char usr;
    unsigned char lastRxError;
 
 
    /* read UART status register and UART data register */ 
    usr  = UART0_STATUS;
  72:	8b b1       	in	r24, 0x0b	; 11
    data = UART0_DATA;
  74:	9c b1       	in	r25, 0x0c	; 12
    
    /* */
#if defined( AT90_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
  76:	88 71       	andi	r24, 0x18	; 24
#elif defined ( ATMEGA_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#endif
        
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
  78:	e0 91 72 00 	lds	r30, 0x0072
  7c:	ef 5f       	subi	r30, 0xFF	; 255
  7e:	ef 71       	andi	r30, 0x1F	; 31
    
    if ( tmphead == UART_RxTail ) {
  80:	20 91 71 00 	lds	r18, 0x0071
  84:	e2 17       	cp	r30, r18
  86:	39 f0       	breq	.+14     	; 0x96 <__vector_11+0x38>
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }else{
        /* store new index */
        UART_RxHead = tmphead;
  88:	e0 93 72 00 	sts	0x0072, r30
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
  8c:	f0 e0       	ldi	r31, 0x00	; 0
  8e:	eb 58       	subi	r30, 0x8B	; 139
  90:	ff 4f       	sbci	r31, 0xFF	; 255
  92:	90 83       	st	Z, r25
  94:	01 c0       	rjmp	.+2      	; 0x98 <__vector_11+0x3a>
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
    
    if ( tmphead == UART_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
  96:	82 e0       	ldi	r24, 0x02	; 2
        /* store new index */
        UART_RxHead = tmphead;
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    }
    UART_LastRxError = lastRxError;   
  98:	80 93 70 00 	sts	0x0070, r24
}
  9c:	ff 91       	pop	r31
  9e:	ef 91       	pop	r30
  a0:	9f 91       	pop	r25
  a2:	8f 91       	pop	r24
  a4:	2f 91       	pop	r18
  a6:	0f 90       	pop	r0
  a8:	0f be       	out	0x3f, r0	; 63
  aa:	0f 90       	pop	r0
  ac:	1f 90       	pop	r1
  ae:	18 95       	reti

000000b0 <__vector_13>:
ISR(UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
  b0:	1f 92       	push	r1
  b2:	0f 92       	push	r0
  b4:	0f b6       	in	r0, 0x3f	; 63
  b6:	0f 92       	push	r0
  b8:	11 24       	eor	r1, r1
  ba:	8f 93       	push	r24
  bc:	9f 93       	push	r25
  be:	ef 93       	push	r30
  c0:	ff 93       	push	r31
    unsigned char tmptail;

    
    if ( UART_TxHead != UART_TxTail) {
  c2:	90 91 74 00 	lds	r25, 0x0074
  c6:	80 91 73 00 	lds	r24, 0x0073
  ca:	98 17       	cp	r25, r24
  cc:	61 f0       	breq	.+24     	; 0xe6 <__vector_13+0x36>
        /* calculate and store new buffer index */
        tmptail = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
  ce:	e0 91 73 00 	lds	r30, 0x0073
  d2:	ef 5f       	subi	r30, 0xFF	; 255
  d4:	ef 71       	andi	r30, 0x1F	; 31
        UART_TxTail = tmptail;
  d6:	e0 93 73 00 	sts	0x0073, r30
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail];  /* start transmission */
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	eb 56       	subi	r30, 0x6B	; 107
  de:	ff 4f       	sbci	r31, 0xFF	; 255
  e0:	80 81       	ld	r24, Z
  e2:	8c b9       	out	0x0c, r24	; 12
  e4:	01 c0       	rjmp	.+2      	; 0xe8 <__vector_13+0x38>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
  e6:	55 98       	cbi	0x0a, 5	; 10
    }
}
  e8:	ff 91       	pop	r31
  ea:	ef 91       	pop	r30
  ec:	9f 91       	pop	r25
  ee:	8f 91       	pop	r24
  f0:	0f 90       	pop	r0
  f2:	0f be       	out	0x3f, r0	; 63
  f4:	0f 90       	pop	r0
  f6:	1f 90       	pop	r1
  f8:	18 95       	reti

000000fa <uart_init>:
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void uart_init(unsigned int baudrate)
{
    UART_TxHead = 0;
  fa:	10 92 74 00 	sts	0x0074, r1
    UART_TxTail = 0;
  fe:	10 92 73 00 	sts	0x0073, r1
    UART_RxHead = 0;
 102:	10 92 72 00 	sts	0x0072, r1
    UART_RxTail = 0;
 106:	10 92 71 00 	sts	0x0071, r1
    /* enable UART receiver and transmmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE)|_BV(RXEN)|_BV(TXEN);

#elif defined (ATMEGA_USART)
    /* Set baud rate */
    if ( baudrate & 0x8000 )
 10a:	97 ff       	sbrs	r25, 7
 10c:	03 c0       	rjmp	.+6      	; 0x114 <uart_init+0x1a>
    {
    	 UART0_STATUS = (1<<U2X);  //Enable 2x speed 
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	2b b9       	out	0x0b, r18	; 11
    	 baudrate &= ~0x8000;
 112:	9f 77       	andi	r25, 0x7F	; 127
    }
    UBRRH = (unsigned char)(baudrate>>8);
 114:	90 bd       	out	0x20, r25	; 32
    UBRRL = (unsigned char) baudrate;
 116:	89 b9       	out	0x09, r24	; 9
   
    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE)|(1<<RXEN)|(1<<TXEN);
 118:	88 e9       	ldi	r24, 0x98	; 152
 11a:	8a b9       	out	0x0a, r24	; 10
    
    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */
    #ifdef URSEL
    UCSRC = (1<<URSEL)|(3<<UCSZ0);
 11c:	86 e8       	ldi	r24, 0x86	; 134
 11e:	80 bd       	out	0x20, r24	; 32
 120:	08 95       	ret

00000122 <uart_getc>:
{    
    unsigned char tmptail;
    unsigned char data;


    if ( UART_RxHead == UART_RxTail ) {
 122:	90 91 72 00 	lds	r25, 0x0072
 126:	80 91 71 00 	lds	r24, 0x0071
 12a:	98 17       	cp	r25, r24
 12c:	91 f0       	breq	.+36     	; 0x152 <uart_getc+0x30>
        return UART_NO_DATA;   /* no data available */
    }
    
    /* calculate /store buffer index */
    tmptail = (UART_RxTail + 1) & UART_RX_BUFFER_MASK;
 12e:	e0 91 71 00 	lds	r30, 0x0071
 132:	ef 5f       	subi	r30, 0xFF	; 255
 134:	ef 71       	andi	r30, 0x1F	; 31
    UART_RxTail = tmptail; 
 136:	e0 93 71 00 	sts	0x0071, r30
    
    /* get data from receive buffer */
    data = UART_RxBuf[tmptail];
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	eb 58       	subi	r30, 0x8B	; 139
 13e:	ff 4f       	sbci	r31, 0xFF	; 255
 140:	20 81       	ld	r18, Z
    
    return (UART_LastRxError << 8) + data;
 142:	80 91 70 00 	lds	r24, 0x0070
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	98 2f       	mov	r25, r24
 14a:	88 27       	eor	r24, r24
 14c:	82 0f       	add	r24, r18
 14e:	91 1d       	adc	r25, r1
 150:	08 95       	ret
    unsigned char tmptail;
    unsigned char data;


    if ( UART_RxHead == UART_RxTail ) {
        return UART_NO_DATA;   /* no data available */
 152:	80 e0       	ldi	r24, 0x00	; 0
 154:	91 e0       	ldi	r25, 0x01	; 1
    /* get data from receive buffer */
    data = UART_RxBuf[tmptail];
    
    return (UART_LastRxError << 8) + data;

}/* uart_getc */
 156:	08 95       	ret

00000158 <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;

    
    tmphead  = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 158:	90 91 74 00 	lds	r25, 0x0074
 15c:	9f 5f       	subi	r25, 0xFF	; 255
 15e:	9f 71       	andi	r25, 0x1F	; 31
    
    while ( tmphead == UART_TxTail ){
 160:	20 91 73 00 	lds	r18, 0x0073
 164:	92 17       	cp	r25, r18
 166:	e1 f3       	breq	.-8      	; 0x160 <uart_putc+0x8>
        ;/* wait for free space in buffer */
    }
    
    UART_TxBuf[tmphead] = data;
 168:	e9 2f       	mov	r30, r25
 16a:	f0 e0       	ldi	r31, 0x00	; 0
 16c:	eb 56       	subi	r30, 0x6B	; 107
 16e:	ff 4f       	sbci	r31, 0xFF	; 255
 170:	80 83       	st	Z, r24
    UART_TxHead = tmphead;
 172:	90 93 74 00 	sts	0x0074, r25

    /* enable UDRE interrupt */
    UART0_CONTROL    |= _BV(UART0_UDRIE);
 176:	55 9a       	sbi	0x0a, 5	; 10
 178:	08 95       	ret

0000017a <uart_puts>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
 17a:	cf 93       	push	r28
 17c:	df 93       	push	r29
 17e:	ec 01       	movw	r28, r24
    while (*s) 
 180:	89 91       	ld	r24, Y+
 182:	88 23       	and	r24, r24
 184:	11 f0       	breq	.+4      	; 0x18a <uart_puts+0x10>
      uart_putc(*s++);
 186:	e8 df       	rcall	.-48     	; 0x158 <uart_putc>
 188:	fb cf       	rjmp	.-10     	; 0x180 <uart_puts+0x6>

}/* uart_puts */
 18a:	df 91       	pop	r29
 18c:	cf 91       	pop	r28
 18e:	08 95       	ret

00000190 <uart_puts_p>:
Purpose:  transmit string from program memory to UART
Input:    program memory string to be transmitted
Returns:  none
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
 190:	cf 93       	push	r28
 192:	df 93       	push	r29
 194:	fc 01       	movw	r30, r24
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
 196:	84 91       	lpm	r24, Z
 198:	ef 01       	movw	r28, r30
 19a:	21 96       	adiw	r28, 0x01	; 1
 19c:	88 23       	and	r24, r24
 19e:	19 f0       	breq	.+6      	; 0x1a6 <uart_puts_p+0x16>
      uart_putc(c);
 1a0:	db df       	rcall	.-74     	; 0x158 <uart_putc>
 1a2:	fe 01       	movw	r30, r28
 1a4:	f8 cf       	rjmp	.-16     	; 0x196 <uart_puts_p+0x6>

}/* uart_puts_p */
 1a6:	df 91       	pop	r29
 1a8:	cf 91       	pop	r28
 1aa:	08 95       	ret

000001ac <spi_init>:
#include "spi.h"

void spi_init(void)
{

	DDR_SPI |= (1<<P_SCK) | (1<<P_MOSI);
 1ac:	87 b3       	in	r24, 0x17	; 23
 1ae:	88 62       	ori	r24, 0x28	; 40
 1b0:	87 bb       	out	0x17, r24	; 23
	PORT_SPI &= ~((1<<P_SCK) | (1<<P_MOSI) | (1<<P_MISO));
 1b2:	88 b3       	in	r24, 0x18	; 24
 1b4:	87 7c       	andi	r24, 0xC7	; 199
 1b6:	88 bb       	out	0x18, r24	; 24

	DDR_CS |= (1<<P_CS);
 1b8:	ba 9a       	sbi	0x17, 2	; 23
	PORT_CS |= (1<<P_CS);
 1ba:	c2 9a       	sbi	0x18, 2	; 24

	SPCR = (1<<SPE) |  (1<<MSTR);
 1bc:	80 e5       	ldi	r24, 0x50	; 80
 1be:	8d b9       	out	0x0d, r24	; 13
	SPSR = (1<<SPI2X);
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	8e b9       	out	0x0e, r24	; 14
 1c4:	08 95       	ret

000001c6 <spi_trans>:
}

uint8_t spi_trans(uint8_t data)
{
	SPDR = data;
 1c6:	8f b9       	out	0x0f, r24	; 15

	while(!(SPSR & (1<<SPIF)));
 1c8:	77 9b       	sbis	0x0e, 7	; 14
 1ca:	fe cf       	rjmp	.-4      	; 0x1c8 <spi_trans+0x2>

	return SPDR;
 1cc:	8f b1       	in	r24, 0x0f	; 15
 1ce:	08 95       	ret

000001d0 <mcp_write_reg>:
#include <util/delay.h>
#include "spi.h"
#include "mcp2515.h"

void mcp_write_reg(uint8_t addr, uint8_t data)
{
 1d0:	1f 93       	push	r17
 1d2:	cf 93       	push	r28
 1d4:	df 93       	push	r29
 1d6:	1f 92       	push	r1
 1d8:	cd b7       	in	r28, 0x3d	; 61
 1da:	de b7       	in	r29, 0x3e	; 62
 1dc:	18 2f       	mov	r17, r24
	PORT_CS &= ~(1<<P_CS);
 1de:	c2 98       	cbi	0x18, 2	; 24

	spi_trans(MCP_SPI_WRITE);
 1e0:	82 e0       	ldi	r24, 0x02	; 2
 1e2:	69 83       	std	Y+1, r22	; 0x01
 1e4:	f0 df       	rcall	.-32     	; 0x1c6 <spi_trans>
	spi_trans(addr);
 1e6:	81 2f       	mov	r24, r17
 1e8:	ee df       	rcall	.-36     	; 0x1c6 <spi_trans>
	spi_trans(data);
 1ea:	69 81       	ldd	r22, Y+1	; 0x01
 1ec:	86 2f       	mov	r24, r22
 1ee:	eb df       	rcall	.-42     	; 0x1c6 <spi_trans>

	PORT_CS |= (1<<P_CS);
 1f0:	c2 9a       	sbi	0x18, 2	; 24
	
	return;
}
 1f2:	0f 90       	pop	r0
 1f4:	df 91       	pop	r29
 1f6:	cf 91       	pop	r28
 1f8:	1f 91       	pop	r17
 1fa:	08 95       	ret

000001fc <mcp_read_reg>:

uint8_t mcp_read_reg(uint8_t addr)
{
 1fc:	cf 93       	push	r28
 1fe:	c8 2f       	mov	r28, r24
	uint8_t data;

	PORT_CS &= ~(1<<P_CS);
 200:	c2 98       	cbi	0x18, 2	; 24

	spi_trans(MCP_SPI_READ);
 202:	83 e0       	ldi	r24, 0x03	; 3
 204:	e0 df       	rcall	.-64     	; 0x1c6 <spi_trans>
	spi_trans(addr);
 206:	8c 2f       	mov	r24, r28
 208:	de df       	rcall	.-68     	; 0x1c6 <spi_trans>
	data = spi_trans(0xff);
 20a:	8f ef       	ldi	r24, 0xFF	; 255
 20c:	dc df       	rcall	.-72     	; 0x1c6 <spi_trans>

	PORT_CS |= (1<<P_CS);
 20e:	c2 9a       	sbi	0x18, 2	; 24
	
	return data;
}
 210:	cf 91       	pop	r28
 212:	08 95       	ret

00000214 <mcp_bit_mod>:

void mcp_bit_mod(uint8_t addr, uint8_t mask, uint8_t data)
{
 214:	1f 93       	push	r17
 216:	cf 93       	push	r28
 218:	df 93       	push	r29
 21a:	00 d0       	rcall	.+0      	; 0x21c <mcp_bit_mod+0x8>
 21c:	cd b7       	in	r28, 0x3d	; 61
 21e:	de b7       	in	r29, 0x3e	; 62
 220:	18 2f       	mov	r17, r24
	PORT_CS &= ~(1<<P_CS);
 222:	c2 98       	cbi	0x18, 2	; 24

	spi_trans(MCP_SPI_WRITE);
 224:	82 e0       	ldi	r24, 0x02	; 2
 226:	4a 83       	std	Y+2, r20	; 0x02
 228:	69 83       	std	Y+1, r22	; 0x01
 22a:	cd df       	rcall	.-102    	; 0x1c6 <spi_trans>
	spi_trans(addr);
 22c:	81 2f       	mov	r24, r17
 22e:	cb df       	rcall	.-106    	; 0x1c6 <spi_trans>
	spi_trans(mask);
 230:	69 81       	ldd	r22, Y+1	; 0x01
 232:	86 2f       	mov	r24, r22
 234:	c8 df       	rcall	.-112    	; 0x1c6 <spi_trans>
	spi_trans(data);
 236:	4a 81       	ldd	r20, Y+2	; 0x02
 238:	84 2f       	mov	r24, r20
 23a:	c5 df       	rcall	.-118    	; 0x1c6 <spi_trans>

	PORT_CS |= (1<<P_CS);
 23c:	c2 9a       	sbi	0x18, 2	; 24
	
	return;
}
 23e:	0f 90       	pop	r0
 240:	0f 90       	pop	r0
 242:	df 91       	pop	r29
 244:	cf 91       	pop	r28
 246:	1f 91       	pop	r17
 248:	08 95       	ret

0000024a <mcp_init>:

void mcp_init(void)
{

	spi_init();
 24a:	b0 df       	rcall	.-160    	; 0x1ac <spi_init>

	PORT_CS &= ~(1<<P_CS);
 24c:	c2 98       	cbi	0x18, 2	; 24
	spi_trans(MCP_SPI_RESET);
 24e:	80 ec       	ldi	r24, 0xC0	; 192
 250:	ba df       	rcall	.-140    	; 0x1c6 <spi_trans>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 252:	83 e3       	ldi	r24, 0x33	; 51
 254:	97 e0       	ldi	r25, 0x07	; 7
 256:	01 97       	sbiw	r24, 0x01	; 1
 258:	f1 f7       	brne	.-4      	; 0x256 <mcp_init+0xc>
	_delay_ms(1);
	PORT_CS |= (1<<P_CS);
 25a:	c2 9a       	sbi	0x18, 2	; 24
 25c:	8f ef       	ldi	r24, 0xFF	; 255
 25e:	97 e4       	ldi	r25, 0x47	; 71
 260:	01 97       	sbiw	r24, 0x01	; 1
 262:	f1 f7       	brne	.-4      	; 0x260 <mcp_init+0x16>
 264:	00 c0       	rjmp	.+0      	; 0x266 <mcp_init+0x1c>
 266:	00 00       	nop
	_delay_ms(10);

	mcp_write_reg(CNF1, R_CNF1);
 268:	67 e0       	ldi	r22, 0x07	; 7
 26a:	8a e2       	ldi	r24, 0x2A	; 42
 26c:	b1 df       	rcall	.-158    	; 0x1d0 <mcp_write_reg>
	mcp_write_reg(CNF2, R_CNF2);
 26e:	60 e9       	ldi	r22, 0x90	; 144
 270:	89 e2       	ldi	r24, 0x29	; 41
 272:	ae df       	rcall	.-164    	; 0x1d0 <mcp_write_reg>
	mcp_write_reg(CNF3, R_CNF3);
 274:	62 e0       	ldi	r22, 0x02	; 2
 276:	88 e2       	ldi	r24, 0x28	; 40
 278:	ab cf       	rjmp	.-170    	; 0x1d0 <mcp_write_reg>

0000027a <main>:
#include "mcp2515.h"


int main(void)
{
	DDR_LED0 |= (1<<LED0);
 27a:	a2 9a       	sbi	0x14, 2	; 20
	DDR_LED1 |= (1<<LED1);
 27c:	a3 9a       	sbi	0x14, 3	; 20


	uart_init(UART_BAUD_SELECT(BAUD, F_CPU));
 27e:	8f e2       	ldi	r24, 0x2F	; 47
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	3b df       	rcall	.-394    	; 0xfa <uart_init>
	sei();
 284:	78 94       	sei

	
	PORT_LED1 |= (1<<LED1);
 286:	ab 9a       	sbi	0x15, 3	; 21
	uart_puts("CAN-Demo Code\n\r");
 288:	80 e6       	ldi	r24, 0x60	; 96
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	76 df       	rcall	.-276    	; 0x17a <uart_puts>
	PORT_LED0 |= (1<<LED0);
 28e:	aa 9a       	sbi	0x15, 2	; 21


	while(1);
 290:	ff cf       	rjmp	.-2      	; 0x290 <main+0x16>

00000292 <_exit>:
 292:	f8 94       	cli

00000294 <__stop_program>:
 294:	ff cf       	rjmp	.-2      	; 0x294 <__stop_program>
