
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000057e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000096  00800060  0000057e  00000612  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  008000f6  008000f6  000006a8  2**0
                  ALLOC
  3 .comment      00000027  00000000  00000000  000006a8  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  000006cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001595  00000000  00000000  0000074f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a48  00000000  00000000  00001ce4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000328  00000000  00000000  0000272c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001f8  00000000  00000000  00002a54  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003eb  00000000  00000000  00002c4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000620  00000000  00000000  00003037  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00003657  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ee e7       	ldi	r30, 0x7E	; 126
  3a:	f5 e0       	ldi	r31, 0x05	; 5
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a6 3f       	cpi	r26, 0xF6	; 246
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	10 e0       	ldi	r17, 0x00	; 0
  4a:	a6 ef       	ldi	r26, 0xF6	; 246
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	af 3f       	cpi	r26, 0xFF	; 255
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	1b d2       	rcall	.+1078   	; 0x490 <main>
  5a:	8f c2       	rjmp	.+1310   	; 0x57a <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <uart_init>:
static char buffer[9];

void uart_init(unsigned int baudrate)
{
    
    UBRRL = (unsigned char) baudrate;
  5e:	89 b9       	out	0x09, r24	; 9
    UBRRH = (unsigned char)(baudrate>>8);
  60:	90 bd       	out	0x20, r25	; 32


    UCSRB = (1<<TXEN) | (1<<RXEN);
  62:	88 e1       	ldi	r24, 0x18	; 24
  64:	8a b9       	out	0x0a, r24	; 10
    UCSRC = (1<<URSEL) | (1<<UCSZ1) | (1<<UCSZ0);
  66:	86 e8       	ldi	r24, 0x86	; 134
  68:	80 bd       	out	0x20, r24	; 32
  6a:	08 95       	ret

0000006c <uart_putc>:
}

void uart_putc(unsigned char data)
{
    // uart data register empty ?
    while(!(UCSRA & (1<<UDRE)));
  6c:	5d 9b       	sbis	0x0b, 5	; 11
  6e:	fe cf       	rjmp	.-4      	; 0x6c <uart_putc>
    UDR = data;
  70:	8c b9       	out	0x0c, r24	; 12
  72:	08 95       	ret

00000074 <uart_puts>:

    return;
}

void uart_puts(const char *s )
{
  74:	cf 93       	push	r28
  76:	df 93       	push	r29
  78:	ec 01       	movw	r28, r24
    while (*s) 
  7a:	89 91       	ld	r24, Y+
  7c:	88 23       	and	r24, r24
  7e:	11 f0       	breq	.+4      	; 0x84 <uart_puts+0x10>
      uart_putc(*s++);
  80:	f5 df       	rcall	.-22     	; 0x6c <uart_putc>
  82:	fb cf       	rjmp	.-10     	; 0x7a <uart_puts+0x6>

  return;

}
  84:	df 91       	pop	r29
  86:	cf 91       	pop	r28
  88:	08 95       	ret

0000008a <uart_can_msg>:

void uart_can_msg(Canmsg *s_msg)
{
  8a:	ef 92       	push	r14
  8c:	ff 92       	push	r15
  8e:	0f 93       	push	r16
  90:	1f 93       	push	r17
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	ec 01       	movw	r28, r24
    uart_puts("\n\rID: 0x");
  98:	8a ec       	ldi	r24, 0xCA	; 202
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	eb df       	rcall	.-42     	; 0x74 <uart_puts>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
  9e:	40 e1       	ldi	r20, 0x10	; 16
  a0:	66 ef       	ldi	r22, 0xF6	; 246
  a2:	70 e0       	ldi	r23, 0x00	; 0
  a4:	88 81       	ld	r24, Y
  a6:	99 81       	ldd	r25, Y+1	; 0x01
  a8:	35 d2       	rcall	.+1130   	; 0x514 <__itoa_ncheck>
    itoa(s_msg->id,buffer, 16);
    uart_puts(buffer);
  aa:	86 ef       	ldi	r24, 0xF6	; 246
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	e2 df       	rcall	.-60     	; 0x74 <uart_puts>
    uart_puts("\n\rLength: 0x");
  b0:	83 ed       	ldi	r24, 0xD3	; 211
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	df df       	rcall	.-66     	; 0x74 <uart_puts>
    itoa(s_msg->length,buffer, 16);
  b6:	8d 81       	ldd	r24, Y+5	; 0x05
  b8:	40 e1       	ldi	r20, 0x10	; 16
  ba:	66 ef       	ldi	r22, 0xF6	; 246
  bc:	70 e0       	ldi	r23, 0x00	; 0
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	29 d2       	rcall	.+1106   	; 0x514 <__itoa_ncheck>
    uart_puts(buffer);
  c2:	86 ef       	ldi	r24, 0xF6	; 246
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	d6 df       	rcall	.-84     	; 0x74 <uart_puts>

    uart_puts("\n\rRTR: ");
  c8:	80 ee       	ldi	r24, 0xE0	; 224
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	d3 df       	rcall	.-90     	; 0x74 <uart_puts>
    itoa(s_msg->rtr,buffer, 16);
  ce:	8c 81       	ldd	r24, Y+4	; 0x04
  d0:	40 e1       	ldi	r20, 0x10	; 16
  d2:	66 ef       	ldi	r22, 0xF6	; 246
  d4:	70 e0       	ldi	r23, 0x00	; 0
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	1d d2       	rcall	.+1082   	; 0x514 <__itoa_ncheck>
    uart_puts(buffer);
  da:	86 ef       	ldi	r24, 0xF6	; 246
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	ca df       	rcall	.-108    	; 0x74 <uart_puts>
  e0:	7e 01       	movw	r14, r28
  e2:	86 e0       	ldi	r24, 0x06	; 6
  e4:	e8 0e       	add	r14, r24
  e6:	f1 1c       	adc	r15, r1

    for(int i = 0; i < s_msg->length; i++)
  e8:	00 e0       	ldi	r16, 0x00	; 0
  ea:	10 e0       	ldi	r17, 0x00	; 0
  ec:	8d 81       	ldd	r24, Y+5	; 0x05
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	08 17       	cp	r16, r24
  f2:	19 07       	cpc	r17, r25
  f4:	8c f4       	brge	.+34     	; 0x118 <uart_can_msg+0x8e>
    {
        uart_puts("\n\rData: 0x");
  f6:	88 ee       	ldi	r24, 0xE8	; 232
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	bc df       	rcall	.-136    	; 0x74 <uart_puts>
        itoa(s_msg->data[i],buffer, 16);
  fc:	f7 01       	movw	r30, r14
  fe:	81 91       	ld	r24, Z+
 100:	7f 01       	movw	r14, r30
 102:	40 e1       	ldi	r20, 0x10	; 16
 104:	66 ef       	ldi	r22, 0xF6	; 246
 106:	70 e0       	ldi	r23, 0x00	; 0
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	04 d2       	rcall	.+1032   	; 0x514 <__itoa_ncheck>
        uart_puts(buffer);
 10c:	86 ef       	ldi	r24, 0xF6	; 246
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	b1 df       	rcall	.-158    	; 0x74 <uart_puts>

    uart_puts("\n\rRTR: ");
    itoa(s_msg->rtr,buffer, 16);
    uart_puts(buffer);

    for(int i = 0; i < s_msg->length; i++)
 112:	0f 5f       	subi	r16, 0xFF	; 255
 114:	1f 4f       	sbci	r17, 0xFF	; 255
 116:	ea cf       	rjmp	.-44     	; 0xec <uart_can_msg+0x62>
        uart_puts("\n\rData: 0x");
        itoa(s_msg->data[i],buffer, 16);
        uart_puts(buffer);
    }
    
    uart_puts("\n\r");
 118:	8e e9       	ldi	r24, 0x9E	; 158
 11a:	90 e0       	ldi	r25, 0x00	; 0
    return;
}
 11c:	df 91       	pop	r29
 11e:	cf 91       	pop	r28
 120:	1f 91       	pop	r17
 122:	0f 91       	pop	r16
 124:	ff 90       	pop	r15
 126:	ef 90       	pop	r14
        uart_puts("\n\rData: 0x");
        itoa(s_msg->data[i],buffer, 16);
        uart_puts(buffer);
    }
    
    uart_puts("\n\r");
 128:	a5 cf       	rjmp	.-182    	; 0x74 <uart_puts>

0000012a <spi_init>:
#include "spi.h"

void spi_init(void)
{

	DDR_SPI |= (1<<P_SCK) | (1<<P_MOSI);
 12a:	87 b3       	in	r24, 0x17	; 23
 12c:	88 62       	ori	r24, 0x28	; 40
 12e:	87 bb       	out	0x17, r24	; 23
	PORT_SPI &= ~((1<<P_SCK) | (1<<P_MOSI) | (1<<P_MISO));
 130:	88 b3       	in	r24, 0x18	; 24
 132:	87 7c       	andi	r24, 0xC7	; 199
 134:	88 bb       	out	0x18, r24	; 24

	DDR_CS |= (1<<P_CS);
 136:	ba 9a       	sbi	0x17, 2	; 23
	PORT_CS |= (1<<P_CS);
 138:	c2 9a       	sbi	0x18, 2	; 24

	SPCR = (1<<SPE) |  (1<<MSTR);
 13a:	80 e5       	ldi	r24, 0x50	; 80
 13c:	8d b9       	out	0x0d, r24	; 13
	SPSR = (1<<SPI2X);
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	8e b9       	out	0x0e, r24	; 14
 142:	08 95       	ret

00000144 <spi_trans>:
}

uint8_t spi_trans(uint8_t data)
{
	SPDR = data;
 144:	8f b9       	out	0x0f, r24	; 15

	while(!(SPSR & (1<<SPIF)));
 146:	77 9b       	sbis	0x0e, 7	; 14
 148:	fe cf       	rjmp	.-4      	; 0x146 <spi_trans+0x2>

	return SPDR;
 14a:	8f b1       	in	r24, 0x0f	; 15
 14c:	08 95       	ret

0000014e <mcp_write_reg>:
#include "spi.h"
#include "uart.h"
#include "mcp2515.h"

void mcp_write_reg(uint8_t addr, uint8_t data)
{
 14e:	1f 93       	push	r17
 150:	cf 93       	push	r28
 152:	df 93       	push	r29
 154:	1f 92       	push	r1
 156:	cd b7       	in	r28, 0x3d	; 61
 158:	de b7       	in	r29, 0x3e	; 62
 15a:	18 2f       	mov	r17, r24
	PORT_CS &= ~(1<<P_CS);
 15c:	c2 98       	cbi	0x18, 2	; 24

	spi_trans(SPI_WRITE);
 15e:	82 e0       	ldi	r24, 0x02	; 2
 160:	69 83       	std	Y+1, r22	; 0x01
 162:	f0 df       	rcall	.-32     	; 0x144 <spi_trans>
	spi_trans(addr);
 164:	81 2f       	mov	r24, r17
 166:	ee df       	rcall	.-36     	; 0x144 <spi_trans>
	spi_trans(data);
 168:	69 81       	ldd	r22, Y+1	; 0x01
 16a:	86 2f       	mov	r24, r22
 16c:	eb df       	rcall	.-42     	; 0x144 <spi_trans>

	PORT_CS |= (1<<P_CS);
 16e:	c2 9a       	sbi	0x18, 2	; 24
	
	return;
}
 170:	0f 90       	pop	r0
 172:	df 91       	pop	r29
 174:	cf 91       	pop	r28
 176:	1f 91       	pop	r17
 178:	08 95       	ret

0000017a <mcp_read_reg>:

uint8_t mcp_read_reg(uint8_t addr)
{
 17a:	cf 93       	push	r28
 17c:	c8 2f       	mov	r28, r24
	uint8_t data;

	PORT_CS &= ~(1<<P_CS);
 17e:	c2 98       	cbi	0x18, 2	; 24

	spi_trans(SPI_READ);
 180:	83 e0       	ldi	r24, 0x03	; 3
 182:	e0 df       	rcall	.-64     	; 0x144 <spi_trans>
	spi_trans(addr);
 184:	8c 2f       	mov	r24, r28
 186:	de df       	rcall	.-68     	; 0x144 <spi_trans>
	data = spi_trans(0xff);
 188:	8f ef       	ldi	r24, 0xFF	; 255
 18a:	dc df       	rcall	.-72     	; 0x144 <spi_trans>

	PORT_CS |= (1<<P_CS);
 18c:	c2 9a       	sbi	0x18, 2	; 24
	
	return data;
}
 18e:	cf 91       	pop	r28
 190:	08 95       	ret

00000192 <mcp_bit_mod>:

void mcp_bit_mod(uint8_t addr, uint8_t mask, uint8_t data)
{
 192:	1f 93       	push	r17
 194:	cf 93       	push	r28
 196:	df 93       	push	r29
 198:	00 d0       	rcall	.+0      	; 0x19a <mcp_bit_mod+0x8>
 19a:	cd b7       	in	r28, 0x3d	; 61
 19c:	de b7       	in	r29, 0x3e	; 62
 19e:	18 2f       	mov	r17, r24
	PORT_CS &= ~(1<<P_CS);
 1a0:	c2 98       	cbi	0x18, 2	; 24

	spi_trans(SPI_BIT_MOD);
 1a2:	85 e0       	ldi	r24, 0x05	; 5
 1a4:	4a 83       	std	Y+2, r20	; 0x02
 1a6:	69 83       	std	Y+1, r22	; 0x01
 1a8:	cd df       	rcall	.-102    	; 0x144 <spi_trans>
	spi_trans(addr);
 1aa:	81 2f       	mov	r24, r17
 1ac:	cb df       	rcall	.-106    	; 0x144 <spi_trans>
	spi_trans(mask);
 1ae:	69 81       	ldd	r22, Y+1	; 0x01
 1b0:	86 2f       	mov	r24, r22
 1b2:	c8 df       	rcall	.-112    	; 0x144 <spi_trans>
	spi_trans(data);
 1b4:	4a 81       	ldd	r20, Y+2	; 0x02
 1b6:	84 2f       	mov	r24, r20
 1b8:	c5 df       	rcall	.-118    	; 0x144 <spi_trans>

	PORT_CS |= (1<<P_CS);
 1ba:	c2 9a       	sbi	0x18, 2	; 24
	
	return;
}
 1bc:	0f 90       	pop	r0
 1be:	0f 90       	pop	r0
 1c0:	df 91       	pop	r29
 1c2:	cf 91       	pop	r28
 1c4:	1f 91       	pop	r17
 1c6:	08 95       	ret

000001c8 <mcp_init>:

void mcp_init(void)
{

	spi_init();
 1c8:	b0 df       	rcall	.-160    	; 0x12a <spi_init>

	PORT_CS &= ~(1<<P_CS);
 1ca:	c2 98       	cbi	0x18, 2	; 24
	spi_trans(SPI_RESET);
 1cc:	80 ec       	ldi	r24, 0xC0	; 192
 1ce:	ba df       	rcall	.-140    	; 0x144 <spi_trans>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1d0:	83 e3       	ldi	r24, 0x33	; 51
 1d2:	97 e0       	ldi	r25, 0x07	; 7
 1d4:	01 97       	sbiw	r24, 0x01	; 1
 1d6:	f1 f7       	brne	.-4      	; 0x1d4 <mcp_init+0xc>
	_delay_ms(1);
	PORT_CS |= (1<<P_CS);
 1d8:	c2 9a       	sbi	0x18, 2	; 24
 1da:	8f ef       	ldi	r24, 0xFF	; 255
 1dc:	97 e4       	ldi	r25, 0x47	; 71
 1de:	01 97       	sbiw	r24, 0x01	; 1
 1e0:	f1 f7       	brne	.-4      	; 0x1de <mcp_init+0x16>
 1e2:	00 c0       	rjmp	.+0      	; 0x1e4 <mcp_init+0x1c>
 1e4:	00 00       	nop
	_delay_ms(10);

	// set can clock rate
	mcp_write_reg(CNF1, R_CNF1);
 1e6:	67 e0       	ldi	r22, 0x07	; 7
 1e8:	8a e2       	ldi	r24, 0x2A	; 42
 1ea:	b1 df       	rcall	.-158    	; 0x14e <mcp_write_reg>
	mcp_write_reg(CNF2, R_CNF2);
 1ec:	60 e9       	ldi	r22, 0x90	; 144
 1ee:	89 e2       	ldi	r24, 0x29	; 41
 1f0:	ae df       	rcall	.-164    	; 0x14e <mcp_write_reg>
	mcp_write_reg(CNF3, R_CNF3);
 1f2:	62 e0       	ldi	r22, 0x02	; 2
 1f4:	88 e2       	ldi	r24, 0x28	; 40
 1f6:	ab df       	rcall	.-170    	; 0x14e <mcp_write_reg>

	mcp_write_reg(CANINTE, (1<<RX1IE)|(1<<RX0IE));
 1f8:	63 e0       	ldi	r22, 0x03	; 3
 1fa:	8b e2       	ldi	r24, 0x2B	; 43
 1fc:	a8 df       	rcall	.-176    	; 0x14e <mcp_write_reg>

	// clear msg masks
	mcp_write_reg( RXB0CTRL, (1<<RXM1)|(1<<RXM0) );
 1fe:	60 e6       	ldi	r22, 0x60	; 96
 200:	80 e6       	ldi	r24, 0x60	; 96
 202:	a5 df       	rcall	.-182    	; 0x14e <mcp_write_reg>
	mcp_write_reg( RXB1CTRL, (1<<RXM1)|(1<<RXM0) );
 204:	60 e6       	ldi	r22, 0x60	; 96
 206:	80 e7       	ldi	r24, 0x70	; 112
 208:	a2 df       	rcall	.-188    	; 0x14e <mcp_write_reg>

	mcp_write_reg( RXM0SIDH, 0 );
 20a:	60 e0       	ldi	r22, 0x00	; 0
 20c:	80 e5       	ldi	r24, 0x50	; 80
 20e:	9f df       	rcall	.-194    	; 0x14e <mcp_write_reg>
	mcp_write_reg( RXM0SIDL, 0 );
 210:	60 e0       	ldi	r22, 0x00	; 0
 212:	81 e2       	ldi	r24, 0x21	; 33
 214:	9c df       	rcall	.-200    	; 0x14e <mcp_write_reg>
	mcp_write_reg( RXM0EID8, 0 );
 216:	60 e0       	ldi	r22, 0x00	; 0
 218:	82 e2       	ldi	r24, 0x22	; 34
 21a:	99 df       	rcall	.-206    	; 0x14e <mcp_write_reg>
	mcp_write_reg( RXM0EID0, 0 );
 21c:	60 e0       	ldi	r22, 0x00	; 0
 21e:	83 e2       	ldi	r24, 0x23	; 35
 220:	96 df       	rcall	.-212    	; 0x14e <mcp_write_reg>

	mcp_write_reg( RXM1SIDH, 0 );
 222:	60 e0       	ldi	r22, 0x00	; 0
 224:	84 e2       	ldi	r24, 0x24	; 36
 226:	93 df       	rcall	.-218    	; 0x14e <mcp_write_reg>
	mcp_write_reg( RXM1SIDL, 0 );
 228:	60 e0       	ldi	r22, 0x00	; 0
 22a:	85 e2       	ldi	r24, 0x25	; 37
 22c:	90 df       	rcall	.-224    	; 0x14e <mcp_write_reg>
	mcp_write_reg( RXM1EID8, 0 );
 22e:	60 e0       	ldi	r22, 0x00	; 0
 230:	86 e2       	ldi	r24, 0x26	; 38
 232:	8d df       	rcall	.-230    	; 0x14e <mcp_write_reg>
	mcp_write_reg( RXM1EID0, 0 );
 234:	60 e0       	ldi	r22, 0x00	; 0
 236:	87 e2       	ldi	r24, 0x27	; 39
 238:	8a df       	rcall	.-236    	; 0x14e <mcp_write_reg>

	// enable normal mode
   	mcp_bit_mod( CANCTRL, 0xE0, 0);
 23a:	40 e0       	ldi	r20, 0x00	; 0
 23c:	60 ee       	ldi	r22, 0xE0	; 224
 23e:	8f e0       	ldi	r24, 0x0F	; 15
 240:	a8 cf       	rjmp	.-176    	; 0x192 <mcp_bit_mod>

00000242 <can_send_msg>:
	return;
}


uint8_t can_send_msg(Canmsg *s_msg)
{
 242:	ef 92       	push	r14
 244:	ff 92       	push	r15
 246:	0f 93       	push	r16
 248:	1f 93       	push	r17
 24a:	cf 93       	push	r28
 24c:	df 93       	push	r29
 24e:	cd b7       	in	r28, 0x3d	; 61
 250:	de b7       	in	r29, 0x3e	; 62
 252:	2a 97       	sbiw	r28, 0x0a	; 10
 254:	0f b6       	in	r0, 0x3f	; 63
 256:	f8 94       	cli
 258:	de bf       	out	0x3e, r29	; 62
 25a:	0f be       	out	0x3f, r0	; 63
 25c:	cd bf       	out	0x3d, r28	; 61
	int i;
	char buffer[10];
	uint8_t addr;

	if(s_msg->length > 8)
 25e:	fc 01       	movw	r30, r24
 260:	25 81       	ldd	r18, Z+5	; 0x05
 262:	29 30       	cpi	r18, 0x09	; 9
 264:	08 f0       	brcs	.+2      	; 0x268 <can_send_msg+0x26>
 266:	9f c0       	rjmp	.+318    	; 0x3a6 <can_send_msg+0x164>
 268:	8c 01       	movw	r16, r24
		return 2;

	// search for free tx buffer
	PORT_CS &= ~(1<<P_CS);
 26a:	c2 98       	cbi	0x18, 2	; 24
   	spi_trans(SPI_READ_STAT);
 26c:	80 ea       	ldi	r24, 0xA0	; 160
 26e:	6a df       	rcall	.-300    	; 0x144 <spi_trans>
   	addr = spi_trans(0xff);
 270:	8f ef       	ldi	r24, 0xFF	; 255
 272:	68 df       	rcall	.-304    	; 0x144 <spi_trans>
   	PORT_CS |= (1<<P_CS);
 274:	c2 9a       	sbi	0x18, 2	; 24

   	if(!(addr & (1<<TXB0CNTRL_TXREQ)))
 276:	82 ff       	sbrs	r24, 2
 278:	07 c0       	rjmp	.+14     	; 0x288 <can_send_msg+0x46>
   		addr = 0;
   	else if (!(addr & (1<<TXB1CNTRL_TXREQ)))
 27a:	84 ff       	sbrs	r24, 4
 27c:	07 c0       	rjmp	.+14     	; 0x28c <can_send_msg+0x4a>
   		addr = 0x02;
   	else if (!(addr & (1<<TXB2CNTRL_TXREQ)))
 27e:	86 fd       	sbrc	r24, 6
 280:	94 c0       	rjmp	.+296    	; 0x3aa <can_send_msg+0x168>
   		addr = 0x04;
 282:	54 e0       	ldi	r21, 0x04	; 4
 284:	f5 2e       	mov	r15, r21
 286:	04 c0       	rjmp	.+8      	; 0x290 <can_send_msg+0x4e>
   	spi_trans(SPI_READ_STAT);
   	addr = spi_trans(0xff);
   	PORT_CS |= (1<<P_CS);

   	if(!(addr & (1<<TXB0CNTRL_TXREQ)))
   		addr = 0;
 288:	f1 2c       	mov	r15, r1
 28a:	02 c0       	rjmp	.+4      	; 0x290 <can_send_msg+0x4e>
   	else if (!(addr & (1<<TXB1CNTRL_TXREQ)))
   		addr = 0x02;
 28c:	42 e0       	ldi	r20, 0x02	; 2
 28e:	f4 2e       	mov	r15, r20
   	else
   		//no free tx buffer found
   		return 1;


	PORT_CS &= ~(1<<P_CS);
 290:	c2 98       	cbi	0x18, 2	; 24
	spi_trans(SPI_LOAD_TX_BUF  | addr);
 292:	8f 2d       	mov	r24, r15
 294:	80 64       	ori	r24, 0x40	; 64
 296:	56 df       	rcall	.-340    	; 0x144 <spi_trans>

   	// jump of register for ext id
 	spi_trans((uint8_t) (s_msg->id>>19));
 	spi_trans((uint8_t) (s_msg->id>>11));*/

 	spi_trans((uint8_t) (s_msg->id>>21));
 298:	f8 01       	movw	r30, r16
 29a:	80 81       	ld	r24, Z
 29c:	91 81       	ldd	r25, Z+1	; 0x01
 29e:	a2 81       	ldd	r26, Z+2	; 0x02
 2a0:	b3 81       	ldd	r27, Z+3	; 0x03
 2a2:	25 e1       	ldi	r18, 0x15	; 21
 2a4:	b6 95       	lsr	r27
 2a6:	a7 95       	ror	r26
 2a8:	97 95       	ror	r25
 2aa:	87 95       	ror	r24
 2ac:	2a 95       	dec	r18
 2ae:	d1 f7       	brne	.-12     	; 0x2a4 <can_send_msg+0x62>
 2b0:	49 df       	rcall	.-366    	; 0x144 <spi_trans>
   	spi_trans((uint8_t) ((s_msg->id>>13) & 0xE0)  | (1<<EXIDE) | (uint8_t) ((s_msg->id>>16) & 0x03));
 2b2:	f8 01       	movw	r30, r16
 2b4:	40 81       	ld	r20, Z
 2b6:	51 81       	ldd	r21, Z+1	; 0x01
 2b8:	62 81       	ldd	r22, Z+2	; 0x02
 2ba:	73 81       	ldd	r23, Z+3	; 0x03
 2bc:	db 01       	movw	r26, r22
 2be:	ca 01       	movw	r24, r20
 2c0:	3d e0       	ldi	r19, 0x0D	; 13
 2c2:	b6 95       	lsr	r27
 2c4:	a7 95       	ror	r26
 2c6:	97 95       	ror	r25
 2c8:	87 95       	ror	r24
 2ca:	3a 95       	dec	r19
 2cc:	d1 f7       	brne	.-12     	; 0x2c2 <can_send_msg+0x80>
 2ce:	80 7e       	andi	r24, 0xE0	; 224
 2d0:	96 2f       	mov	r25, r22
 2d2:	93 70       	andi	r25, 0x03	; 3
 2d4:	89 2b       	or	r24, r25
 2d6:	88 60       	ori	r24, 0x08	; 8
 2d8:	35 df       	rcall	.-406    	; 0x144 <spi_trans>

   	// jump of register for ext id
 	spi_trans((uint8_t) (s_msg->id>>8));
 2da:	f8 01       	movw	r30, r16
 2dc:	81 81       	ldd	r24, Z+1	; 0x01
 2de:	32 df       	rcall	.-412    	; 0x144 <spi_trans>
 	spi_trans((uint8_t) s_msg->id);
 2e0:	f8 01       	movw	r30, r16
 2e2:	80 81       	ld	r24, Z
 2e4:	2f df       	rcall	.-418    	; 0x144 <spi_trans>

   	// if request ?
   	if(s_msg->rtr)
 2e6:	f8 01       	movw	r30, r16
 2e8:	84 81       	ldd	r24, Z+4	; 0x04
 2ea:	88 23       	and	r24, r24
 2ec:	21 f0       	breq	.+8      	; 0x2f6 <can_send_msg+0xb4>
   		spi_trans((1<<RTR) | s_msg->length);
 2ee:	85 81       	ldd	r24, Z+5	; 0x05
 2f0:	80 68       	ori	r24, 0x80	; 128
 2f2:	28 df       	rcall	.-432    	; 0x144 <spi_trans>
 2f4:	0f c0       	rjmp	.+30     	; 0x314 <can_send_msg+0xd2>
   	else
   	{
   		spi_trans(s_msg->length);
 2f6:	f8 01       	movw	r30, r16
 2f8:	85 81       	ldd	r24, Z+5	; 0x05
 2fa:	24 df       	rcall	.-440    	; 0x144 <spi_trans>

   		for(uint8_t i = 0; i < s_msg->length; i++)
 2fc:	e1 2c       	mov	r14, r1
 2fe:	f8 01       	movw	r30, r16
 300:	85 81       	ldd	r24, Z+5	; 0x05
 302:	e8 16       	cp	r14, r24
 304:	38 f4       	brcc	.+14     	; 0x314 <can_send_msg+0xd2>
   			spi_trans(s_msg->data[i]);
 306:	f8 01       	movw	r30, r16
 308:	ee 0d       	add	r30, r14
 30a:	f1 1d       	adc	r31, r1
 30c:	86 81       	ldd	r24, Z+6	; 0x06
 30e:	1a df       	rcall	.-460    	; 0x144 <spi_trans>
   		spi_trans((1<<RTR) | s_msg->length);
   	else
   	{
   		spi_trans(s_msg->length);

   		for(uint8_t i = 0; i < s_msg->length; i++)
 310:	e3 94       	inc	r14
 312:	f5 cf       	rjmp	.-22     	; 0x2fe <can_send_msg+0xbc>
   			spi_trans(s_msg->data[i]);
   	}

   	PORT_CS |= (1<<P_CS);
 314:	c2 9a       	sbi	0x18, 2	; 24

   	// do nothing one cycle for toggle cs
   	asm volatile ("nop");
 316:	00 00       	nop

	i = mcp_read_reg(  TXB0SIDH);
 318:	81 e3       	ldi	r24, 0x31	; 49
 31a:	2f df       	rcall	.-418    	; 0x17a <mcp_read_reg>
	itoa(i, buffer,2);
 31c:	42 e0       	ldi	r20, 0x02	; 2
 31e:	50 e0       	ldi	r21, 0x00	; 0
 320:	be 01       	movw	r22, r28
 322:	6f 5f       	subi	r22, 0xFF	; 255
 324:	7f 4f       	sbci	r23, 0xFF	; 255
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	eb d0       	rcall	.+470    	; 0x500 <itoa>
	uart_puts(buffer);
 32a:	ce 01       	movw	r24, r28
 32c:	01 96       	adiw	r24, 0x01	; 1
 32e:	a2 de       	rcall	.-700    	; 0x74 <uart_puts>
	uart_puts("\n");
 330:	83 ef       	ldi	r24, 0xF3	; 243
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	9f de       	rcall	.-706    	; 0x74 <uart_puts>
	i = mcp_read_reg( TXB0SIDL);
 336:	82 e3       	ldi	r24, 0x32	; 50
 338:	20 df       	rcall	.-448    	; 0x17a <mcp_read_reg>
	itoa(i, buffer,2);
 33a:	42 e0       	ldi	r20, 0x02	; 2
 33c:	50 e0       	ldi	r21, 0x00	; 0
 33e:	be 01       	movw	r22, r28
 340:	6f 5f       	subi	r22, 0xFF	; 255
 342:	7f 4f       	sbci	r23, 0xFF	; 255
 344:	90 e0       	ldi	r25, 0x00	; 0
 346:	dc d0       	rcall	.+440    	; 0x500 <itoa>
	uart_puts(buffer);
 348:	ce 01       	movw	r24, r28
 34a:	01 96       	adiw	r24, 0x01	; 1
 34c:	93 de       	rcall	.-730    	; 0x74 <uart_puts>
	uart_puts("\n");
 34e:	83 ef       	ldi	r24, 0xF3	; 243
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	90 de       	rcall	.-736    	; 0x74 <uart_puts>
	i =mcp_read_reg( TXB0EID8);
 354:	83 e3       	ldi	r24, 0x33	; 51
 356:	11 df       	rcall	.-478    	; 0x17a <mcp_read_reg>
	itoa(i, buffer,2);
 358:	42 e0       	ldi	r20, 0x02	; 2
 35a:	50 e0       	ldi	r21, 0x00	; 0
 35c:	be 01       	movw	r22, r28
 35e:	6f 5f       	subi	r22, 0xFF	; 255
 360:	7f 4f       	sbci	r23, 0xFF	; 255
 362:	90 e0       	ldi	r25, 0x00	; 0
 364:	cd d0       	rcall	.+410    	; 0x500 <itoa>
	uart_puts(buffer);
 366:	ce 01       	movw	r24, r28
 368:	01 96       	adiw	r24, 0x01	; 1
 36a:	84 de       	rcall	.-760    	; 0x74 <uart_puts>
	uart_puts("\n");
 36c:	83 ef       	ldi	r24, 0xF3	; 243
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	81 de       	rcall	.-766    	; 0x74 <uart_puts>
	i = mcp_read_reg( TXB0EID0);
 372:	84 e3       	ldi	r24, 0x34	; 52
 374:	02 df       	rcall	.-508    	; 0x17a <mcp_read_reg>
	itoa(i, buffer,2);
 376:	42 e0       	ldi	r20, 0x02	; 2
 378:	50 e0       	ldi	r21, 0x00	; 0
 37a:	be 01       	movw	r22, r28
 37c:	6f 5f       	subi	r22, 0xFF	; 255
 37e:	7f 4f       	sbci	r23, 0xFF	; 255
 380:	90 e0       	ldi	r25, 0x00	; 0
 382:	be d0       	rcall	.+380    	; 0x500 <itoa>
	uart_puts(buffer);
 384:	ce 01       	movw	r24, r28
 386:	01 96       	adiw	r24, 0x01	; 1
 388:	75 de       	rcall	.-790    	; 0x74 <uart_puts>
	uart_puts("\n");
 38a:	83 ef       	ldi	r24, 0xF3	; 243
 38c:	90 e0       	ldi	r25, 0x00	; 0
 38e:	72 de       	rcall	.-796    	; 0x74 <uart_puts>



   	PORT_CS &= ~(1<<P_CS);
 390:	c2 98       	cbi	0x18, 2	; 24

   	if(addr == 0)
 392:	f1 10       	cpse	r15, r1
 394:	02 c0       	rjmp	.+4      	; 0x39a <can_send_msg+0x158>
   		spi_trans(SPI_RTS | 0x01);
 396:	81 e8       	ldi	r24, 0x81	; 129
 398:	02 c0       	rjmp	.+4      	; 0x39e <can_send_msg+0x15c>
   	else
   		spi_trans(SPI_RTS | addr);
 39a:	8f 2d       	mov	r24, r15
 39c:	80 68       	ori	r24, 0x80	; 128
 39e:	d2 de       	rcall	.-604    	; 0x144 <spi_trans>

   	PORT_CS |= (1<<P_CS);
 3a0:	c2 9a       	sbi	0x18, 2	; 24

   	return 0;
 3a2:	80 e0       	ldi	r24, 0x00	; 0
 3a4:	03 c0       	rjmp	.+6      	; 0x3ac <can_send_msg+0x16a>
	int i;
	char buffer[10];
	uint8_t addr;

	if(s_msg->length > 8)
		return 2;
 3a6:	82 e0       	ldi	r24, 0x02	; 2
 3a8:	01 c0       	rjmp	.+2      	; 0x3ac <can_send_msg+0x16a>
   		addr = 0x02;
   	else if (!(addr & (1<<TXB2CNTRL_TXREQ)))
   		addr = 0x04;
   	else
   		//no free tx buffer found
   		return 1;
 3aa:	81 e0       	ldi	r24, 0x01	; 1
   		spi_trans(SPI_RTS | addr);

   	PORT_CS |= (1<<P_CS);

   	return 0;
}
 3ac:	2a 96       	adiw	r28, 0x0a	; 10
 3ae:	0f b6       	in	r0, 0x3f	; 63
 3b0:	f8 94       	cli
 3b2:	de bf       	out	0x3e, r29	; 62
 3b4:	0f be       	out	0x3f, r0	; 63
 3b6:	cd bf       	out	0x3d, r28	; 61
 3b8:	df 91       	pop	r29
 3ba:	cf 91       	pop	r28
 3bc:	1f 91       	pop	r17
 3be:	0f 91       	pop	r16
 3c0:	ff 90       	pop	r15
 3c2:	ef 90       	pop	r14
 3c4:	08 95       	ret

000003c6 <mcp_read_rx_stat>:

uint8_t mcp_read_rx_stat(void)
{
	uint8_t data;
	PORT_CS &= ~(1<<P_CS);
 3c6:	c2 98       	cbi	0x18, 2	; 24
	spi_trans(SPI_RX_STAT);
 3c8:	80 eb       	ldi	r24, 0xB0	; 176
 3ca:	bc de       	rcall	.-648    	; 0x144 <spi_trans>
	data = spi_trans(0xff);
 3cc:	8f ef       	ldi	r24, 0xFF	; 255
 3ce:	ba de       	rcall	.-652    	; 0x144 <spi_trans>
	PORT_CS |= (1<<P_CS);
 3d0:	c2 9a       	sbi	0x18, 2	; 24

	return data;
}
 3d2:	08 95       	ret

000003d4 <can_get_msg>:

uint8_t can_get_msg(Canmsg *s_msg)
{
 3d4:	ff 92       	push	r15
 3d6:	0f 93       	push	r16
 3d8:	1f 93       	push	r17
 3da:	cf 93       	push	r28
 3dc:	df 93       	push	r29
 3de:	ec 01       	movw	r28, r24
	uint8_t status = mcp_read_rx_stat();
 3e0:	f2 df       	rcall	.-28     	; 0x3c6 <mcp_read_rx_stat>
 3e2:	08 2f       	mov	r16, r24

	// message in buffer0
	if(status & (1<<6)) 
 3e4:	18 2f       	mov	r17, r24
 3e6:	10 74       	andi	r17, 0x40	; 64
 3e8:	86 ff       	sbrs	r24, 6
 3ea:	03 c0       	rjmp	.+6      	; 0x3f2 <can_get_msg+0x1e>
	{
		PORT_CS &= ~(1<<P_CS);
 3ec:	c2 98       	cbi	0x18, 2	; 24
		spi_trans(SPI_READ_RX_BUF);
 3ee:	80 e9       	ldi	r24, 0x90	; 144
 3f0:	04 c0       	rjmp	.+8      	; 0x3fa <can_get_msg+0x26>
	}
	// message in buffer1
	else if(status & (1<<7))
 3f2:	87 ff       	sbrs	r24, 7
 3f4:	45 c0       	rjmp	.+138    	; 0x480 <__stack+0x21>
	{
		PORT_CS &= ~(1<<P_CS);
 3f6:	c2 98       	cbi	0x18, 2	; 24
		spi_trans(SPI_READ_RX_BUF | 0x04);
 3f8:	84 e9       	ldi	r24, 0x94	; 148
 3fa:	a4 de       	rcall	.-696    	; 0x144 <spi_trans>
	{
		return 1;
	}

	// read std id
	s_msg -> id = (uint16_t) spi_trans(0xff) << 3;
 3fc:	8f ef       	ldi	r24, 0xFF	; 255
 3fe:	a2 de       	rcall	.-700    	; 0x144 <spi_trans>
 400:	28 e0       	ldi	r18, 0x08	; 8
 402:	82 9f       	mul	r24, r18
 404:	c0 01       	movw	r24, r0
 406:	11 24       	eor	r1, r1
 408:	a0 e0       	ldi	r26, 0x00	; 0
 40a:	b0 e0       	ldi	r27, 0x00	; 0
 40c:	88 83       	st	Y, r24
 40e:	99 83       	std	Y+1, r25	; 0x01
 410:	aa 83       	std	Y+2, r26	; 0x02
 412:	bb 83       	std	Y+3, r27	; 0x03
	s_msg -> id |= (uint16_t) spi_trans(0xff) >> 5;
 414:	8f ef       	ldi	r24, 0xFF	; 255
 416:	96 de       	rcall	.-724    	; 0x144 <spi_trans>
 418:	28 2f       	mov	r18, r24
 41a:	22 95       	swap	r18
 41c:	26 95       	lsr	r18
 41e:	27 70       	andi	r18, 0x07	; 7
 420:	88 81       	ld	r24, Y
 422:	99 81       	ldd	r25, Y+1	; 0x01
 424:	aa 81       	ldd	r26, Y+2	; 0x02
 426:	bb 81       	ldd	r27, Y+3	; 0x03
 428:	82 2b       	or	r24, r18
 42a:	88 83       	st	Y, r24
 42c:	99 83       	std	Y+1, r25	; 0x01
 42e:	aa 83       	std	Y+2, r26	; 0x02
 430:	bb 83       	std	Y+3, r27	; 0x03

	// jump over register for ext id
	spi_trans(0xff);
 432:	8f ef       	ldi	r24, 0xFF	; 255
 434:	87 de       	rcall	.-754    	; 0x144 <spi_trans>
	spi_trans(0xff);
 436:	8f ef       	ldi	r24, 0xFF	; 255
 438:	85 de       	rcall	.-758    	; 0x144 <spi_trans>

	s_msg->length = spi_trans(0xff) & 0x0f;
 43a:	8f ef       	ldi	r24, 0xFF	; 255
 43c:	83 de       	rcall	.-762    	; 0x144 <spi_trans>
 43e:	8f 70       	andi	r24, 0x0F	; 15
 440:	8d 83       	std	Y+5, r24	; 0x05

	for(uint8_t i =0 ; i < s_msg->length; i++)
 442:	f1 2c       	mov	r15, r1
 444:	8d 81       	ldd	r24, Y+5	; 0x05
 446:	f8 16       	cp	r15, r24
 448:	40 f4       	brcc	.+16     	; 0x45a <can_get_msg+0x86>
		s_msg->data[i] = spi_trans(0xff);
 44a:	8f ef       	ldi	r24, 0xFF	; 255
 44c:	7b de       	rcall	.-778    	; 0x144 <spi_trans>
 44e:	fe 01       	movw	r30, r28
 450:	ef 0d       	add	r30, r15
 452:	f1 1d       	adc	r31, r1
 454:	86 83       	std	Z+6, r24	; 0x06
	spi_trans(0xff);
	spi_trans(0xff);

	s_msg->length = spi_trans(0xff) & 0x0f;

	for(uint8_t i =0 ; i < s_msg->length; i++)
 456:	f3 94       	inc	r15
 458:	f5 cf       	rjmp	.-22     	; 0x444 <can_get_msg+0x70>
		s_msg->data[i] = spi_trans(0xff);

	PORT_CS |= (1<<P_CS);
 45a:	c2 9a       	sbi	0x18, 2	; 24

	// rtr msg ?
	if(status & (1<<3))
 45c:	03 ff       	sbrs	r16, 3
 45e:	03 c0       	rjmp	.+6      	; 0x466 <__stack+0x7>
		s_msg->rtr = 1;
 460:	81 e0       	ldi	r24, 0x01	; 1
 462:	8c 83       	std	Y+4, r24	; 0x04
 464:	01 c0       	rjmp	.+2      	; 0x468 <__stack+0x9>
	else
		s_msg->rtr = 0;
 466:	1c 82       	std	Y+4, r1	; 0x04

	// clear interrupt flag for mcp2515
	if(status & (1<<6))
		mcp_bit_mod(CANINTF, (1<<RX0IF), 0);
 468:	40 e0       	ldi	r20, 0x00	; 0
		s_msg->rtr = 1;
	else
		s_msg->rtr = 0;

	// clear interrupt flag for mcp2515
	if(status & (1<<6))
 46a:	11 23       	and	r17, r17
 46c:	29 f0       	breq	.+10     	; 0x478 <__stack+0x19>
		mcp_bit_mod(CANINTF, (1<<RX0IF), 0);
 46e:	61 e0       	ldi	r22, 0x01	; 1
 470:	8c e2       	ldi	r24, 0x2C	; 44
 472:	8f de       	rcall	.-738    	; 0x192 <mcp_bit_mod>
	else
		mcp_bit_mod(CANINTF, (1<<RX1IF), 0);

	return 0;
 474:	10 e0       	ldi	r17, 0x00	; 0
 476:	05 c0       	rjmp	.+10     	; 0x482 <__stack+0x23>

	// clear interrupt flag for mcp2515
	if(status & (1<<6))
		mcp_bit_mod(CANINTF, (1<<RX0IF), 0);
	else
		mcp_bit_mod(CANINTF, (1<<RX1IF), 0);
 478:	62 e0       	ldi	r22, 0x02	; 2
 47a:	8c e2       	ldi	r24, 0x2C	; 44
 47c:	8a de       	rcall	.-748    	; 0x192 <mcp_bit_mod>
 47e:	01 c0       	rjmp	.+2      	; 0x482 <__stack+0x23>
		spi_trans(SPI_READ_RX_BUF | 0x04);
	}
	// no message
	else
	{
		return 1;
 480:	11 e0       	ldi	r17, 0x01	; 1
	else
		mcp_bit_mod(CANINTF, (1<<RX1IF), 0);

	return 0;

}
 482:	81 2f       	mov	r24, r17
 484:	df 91       	pop	r29
 486:	cf 91       	pop	r28
 488:	1f 91       	pop	r17
 48a:	0f 91       	pop	r16
 48c:	ff 90       	pop	r15
 48e:	08 95       	ret

00000490 <main>:
#include "uart.h"
#include "mcp2515.h"


int main(void)
{
 490:	cf 93       	push	r28
 492:	df 93       	push	r29
 494:	cd b7       	in	r28, 0x3d	; 61
 496:	de b7       	in	r29, 0x3e	; 62
 498:	6c 97       	sbiw	r28, 0x1c	; 28
 49a:	0f b6       	in	r0, 0x3f	; 63
 49c:	f8 94       	cli
 49e:	de bf       	out	0x3e, r29	; 62
 4a0:	0f be       	out	0x3f, r0	; 63
 4a2:	cd bf       	out	0x3d, r28	; 61
	char buffer[10];
	Canmsg msg;
	Canmsg newmsg;


	DDR_LED0 |= (1<<LED0);
 4a4:	a2 9a       	sbi	0x14, 2	; 20
	DDR_LED1 |= (1<<LED1);
 4a6:	a3 9a       	sbi	0x14, 3	; 20

	msg.id = 0x1AAF123A;
 4a8:	8a e3       	ldi	r24, 0x3A	; 58
 4aa:	92 e1       	ldi	r25, 0x12	; 18
 4ac:	af ea       	ldi	r26, 0xAF	; 175
 4ae:	ba e1       	ldi	r27, 0x1A	; 26
 4b0:	8f 87       	std	Y+15, r24	; 0x0f
 4b2:	98 8b       	std	Y+16, r25	; 0x10
 4b4:	a9 8b       	std	Y+17, r26	; 0x11
 4b6:	ba 8b       	std	Y+18, r27	; 0x12
	msg.rtr = 0;
 4b8:	1b 8a       	std	Y+19, r1	; 0x13
	msg.length = 4;
 4ba:	84 e0       	ldi	r24, 0x04	; 4
 4bc:	8c 8b       	std	Y+20, r24	; 0x14
	msg.data[0] = 0x01;
 4be:	91 e0       	ldi	r25, 0x01	; 1
 4c0:	9d 8b       	std	Y+21, r25	; 0x15
	msg.data[1] = 0x02;
 4c2:	92 e0       	ldi	r25, 0x02	; 2
 4c4:	9e 8b       	std	Y+22, r25	; 0x16
	msg.data[2] = 0x03;
 4c6:	93 e0       	ldi	r25, 0x03	; 3
 4c8:	9f 8b       	std	Y+23, r25	; 0x17
	msg.data[3] = 0x04;
 4ca:	88 8f       	std	Y+24, r24	; 0x18


	uart_init(BAUD_SELECT(BAUD, F_CPU));
 4cc:	8f e2       	ldi	r24, 0x2F	; 47
 4ce:	90 e0       	ldi	r25, 0x00	; 0
 4d0:	c6 dd       	rcall	.-1140   	; 0x5e <uart_init>
	
	uart_puts("AVR-CAN-Demo Code\n\rFelix Schulze 2015\n\rmail@felixschulze.com\n\r\n\r");
 4d2:	80 e6       	ldi	r24, 0x60	; 96
 4d4:	90 e0       	ldi	r25, 0x00	; 0
 4d6:	ce dd       	rcall	.-1124   	; 0x74 <uart_puts>
	mcp_init();
 4d8:	77 de       	rcall	.-786    	; 0x1c8 <mcp_init>
	uart_puts(":: Init mcp2515\n\r");
 4da:	81 ea       	ldi	r24, 0xA1	; 161
 4dc:	90 e0       	ldi	r25, 0x00	; 0
 4de:	ca dd       	rcall	.-1132   	; 0x74 <uart_puts>


	PORT_LED0 |= (1<<LED0);
 4e0:	aa 9a       	sbi	0x15, 2	; 21

	
	
	can_send_msg(&msg);
 4e2:	ce 01       	movw	r24, r28
 4e4:	0f 96       	adiw	r24, 0x0f	; 15
 4e6:	ad de       	rcall	.-678    	; 0x242 <can_send_msg>
	
	uart_puts(":: send test message\n\r");
 4e8:	83 eb       	ldi	r24, 0xB3	; 179
 4ea:	90 e0       	ldi	r25, 0x00	; 0
 4ec:	c3 dd       	rcall	.-1146   	; 0x74 <uart_puts>


	while(1)
	{	
		if(can_get_msg(&newmsg) == 0)
 4ee:	ce 01       	movw	r24, r28
 4f0:	01 96       	adiw	r24, 0x01	; 1
 4f2:	70 df       	rcall	.-288    	; 0x3d4 <can_get_msg>
 4f4:	81 11       	cpse	r24, r1
 4f6:	fb cf       	rjmp	.-10     	; 0x4ee <main+0x5e>
		{
			uart_can_msg(&newmsg);
 4f8:	ce 01       	movw	r24, r28
 4fa:	01 96       	adiw	r24, 0x01	; 1
 4fc:	c6 dd       	rcall	.-1140   	; 0x8a <uart_can_msg>
 4fe:	f7 cf       	rjmp	.-18     	; 0x4ee <main+0x5e>

00000500 <itoa>:
 500:	45 32       	cpi	r20, 0x25	; 37
 502:	51 05       	cpc	r21, r1
 504:	18 f4       	brcc	.+6      	; 0x50c <itoa+0xc>
 506:	42 30       	cpi	r20, 0x02	; 2
 508:	08 f0       	brcs	.+2      	; 0x50c <itoa+0xc>
 50a:	04 c0       	rjmp	.+8      	; 0x514 <__itoa_ncheck>
 50c:	fb 01       	movw	r30, r22
 50e:	10 82       	st	Z, r1
 510:	cb 01       	movw	r24, r22
 512:	08 95       	ret

00000514 <__itoa_ncheck>:
 514:	bb 27       	eor	r27, r27
 516:	4a 30       	cpi	r20, 0x0A	; 10
 518:	31 f4       	brne	.+12     	; 0x526 <__itoa_ncheck+0x12>
 51a:	99 23       	and	r25, r25
 51c:	22 f4       	brpl	.+8      	; 0x526 <__itoa_ncheck+0x12>
 51e:	bd e2       	ldi	r27, 0x2D	; 45
 520:	90 95       	com	r25
 522:	81 95       	neg	r24
 524:	9f 4f       	sbci	r25, 0xFF	; 255
 526:	01 c0       	rjmp	.+2      	; 0x52a <__utoa_common>

00000528 <__utoa_ncheck>:
 528:	bb 27       	eor	r27, r27

0000052a <__utoa_common>:
 52a:	fb 01       	movw	r30, r22
 52c:	55 27       	eor	r21, r21
 52e:	aa 27       	eor	r26, r26
 530:	88 0f       	add	r24, r24
 532:	99 1f       	adc	r25, r25
 534:	aa 1f       	adc	r26, r26
 536:	a4 17       	cp	r26, r20
 538:	10 f0       	brcs	.+4      	; 0x53e <__utoa_common+0x14>
 53a:	a4 1b       	sub	r26, r20
 53c:	83 95       	inc	r24
 53e:	50 51       	subi	r21, 0x10	; 16
 540:	b9 f7       	brne	.-18     	; 0x530 <__utoa_common+0x6>
 542:	a0 5d       	subi	r26, 0xD0	; 208
 544:	aa 33       	cpi	r26, 0x3A	; 58
 546:	08 f0       	brcs	.+2      	; 0x54a <__utoa_common+0x20>
 548:	a9 5d       	subi	r26, 0xD9	; 217
 54a:	a1 93       	st	Z+, r26
 54c:	00 97       	sbiw	r24, 0x00	; 0
 54e:	79 f7       	brne	.-34     	; 0x52e <__utoa_common+0x4>
 550:	b1 11       	cpse	r27, r1
 552:	b1 93       	st	Z+, r27
 554:	11 92       	st	Z+, r1
 556:	cb 01       	movw	r24, r22
 558:	00 c0       	rjmp	.+0      	; 0x55a <strrev>

0000055a <strrev>:
 55a:	dc 01       	movw	r26, r24
 55c:	fc 01       	movw	r30, r24
 55e:	67 2f       	mov	r22, r23
 560:	71 91       	ld	r23, Z+
 562:	77 23       	and	r23, r23
 564:	e1 f7       	brne	.-8      	; 0x55e <strrev+0x4>
 566:	32 97       	sbiw	r30, 0x02	; 2
 568:	04 c0       	rjmp	.+8      	; 0x572 <strrev+0x18>
 56a:	7c 91       	ld	r23, X
 56c:	6d 93       	st	X+, r22
 56e:	70 83       	st	Z, r23
 570:	62 91       	ld	r22, -Z
 572:	ae 17       	cp	r26, r30
 574:	bf 07       	cpc	r27, r31
 576:	c8 f3       	brcs	.-14     	; 0x56a <strrev+0x10>
 578:	08 95       	ret

0000057a <_exit>:
 57a:	f8 94       	cli

0000057c <__stop_program>:
 57c:	ff cf       	rjmp	.-2      	; 0x57c <__stop_program>
